// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="algebra,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.263000,HLS_SYN_LAT=6,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=391,HLS_SYN_LUT=664,HLS_VERSION=2019_2}" *)

module algebra (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        first,
        second,
        command,
        ap_return
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] first;
input  [31:0] second;
input  [31:0] command;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_48_p2;
reg   [31:0] reg_60;
wire    ap_CS_fsm_state6;
reg   [0:0] icmp_ln5_3_reg_144;
reg   [0:0] icmp_ln5_2_reg_139;
wire   [0:0] icmp_ln5_fu_64_p2;
reg   [0:0] icmp_ln5_reg_129;
wire   [0:0] icmp_ln5_1_fu_70_p2;
reg   [0:0] icmp_ln5_1_reg_134;
wire   [0:0] icmp_ln5_2_fu_76_p2;
wire   [0:0] icmp_ln5_3_fu_82_p2;
wire    ap_CS_fsm_state2;
reg   [31:0] grp_fu_48_p0;
reg   [31:0] grp_fu_48_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state7;
wire   [31:0] bitcast_ln17_fu_88_p1;
wire   [31:0] xor_ln17_fu_91_p2;
wire   [31:0] bitcast_ln17_1_fu_97_p1;
wire   [31:0] grp_fu_56_p2;
wire   [31:0] select_ln5_fu_101_p3;
wire   [31:0] select_ln5_1_fu_108_p3;
wire   [31:0] select_ln5_2_fu_115_p3;
reg   [1:0] grp_fu_48_opcode;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

algebra_faddfsub_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
algebra_faddfsub_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_48_p0),
    .din1(grp_fu_48_p1),
    .opcode(grp_fu_48_opcode),
    .ce(1'b1),
    .dout(grp_fu_48_p2)
);

algebra_fmul_32nscud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
algebra_fmul_32nscud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(second),
    .din1(first),
    .ce(1'b1),
    .dout(grp_fu_56_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        icmp_ln5_1_reg_134 <= icmp_ln5_1_fu_70_p2;
        icmp_ln5_2_reg_139 <= icmp_ln5_2_fu_76_p2;
        icmp_ln5_3_reg_144 <= icmp_ln5_3_fu_82_p2;
        icmp_ln5_reg_129 <= icmp_ln5_fu_64_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln5_2_reg_139 == 1'd1) & (icmp_ln5_3_reg_144 == 1'd0) & (1'b1 == ap_CS_fsm_state6)) | ((icmp_ln5_3_reg_144 == 1'd1) & (1'b1 == ap_CS_fsm_state6)))) begin
        reg_60 <= grp_fu_48_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((icmp_ln5_2_reg_139 == 1'd1) & (icmp_ln5_3_reg_144 == 1'd0))) begin
            grp_fu_48_opcode = 2'd1;
        end else if ((icmp_ln5_3_reg_144 == 1'd1)) begin
            grp_fu_48_opcode = 2'd0;
        end else begin
            grp_fu_48_opcode = 'bx;
        end
    end else begin
        grp_fu_48_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((icmp_ln5_2_reg_139 == 1'd1) & (icmp_ln5_3_reg_144 == 1'd0))) begin
            grp_fu_48_p0 = second;
        end else if ((icmp_ln5_3_reg_144 == 1'd1)) begin
            grp_fu_48_p0 = first;
        end else begin
            grp_fu_48_p0 = 'bx;
        end
    end else begin
        grp_fu_48_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if (((icmp_ln5_2_reg_139 == 1'd1) & (icmp_ln5_3_reg_144 == 1'd0))) begin
            grp_fu_48_p1 = first;
        end else if ((icmp_ln5_3_reg_144 == 1'd1)) begin
            grp_fu_48_p1 = second;
        end else begin
            grp_fu_48_p1 = 'bx;
        end
    end else begin
        grp_fu_48_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_return = ((icmp_ln5_3_reg_144[0:0] === 1'b1) ? reg_60 : select_ln5_2_fu_115_p3);

assign bitcast_ln17_1_fu_97_p1 = xor_ln17_fu_91_p2;

assign bitcast_ln17_fu_88_p1 = first;

assign icmp_ln5_1_fu_70_p2 = ((command == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln5_2_fu_76_p2 = ((command == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln5_3_fu_82_p2 = ((command == 32'd1) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_64_p2 = ((command == 32'd4) ? 1'b1 : 1'b0);

assign select_ln5_1_fu_108_p3 = ((icmp_ln5_1_reg_134[0:0] === 1'b1) ? grp_fu_56_p2 : select_ln5_fu_101_p3);

assign select_ln5_2_fu_115_p3 = ((icmp_ln5_2_reg_139[0:0] === 1'b1) ? reg_60 : select_ln5_1_fu_108_p3);

assign select_ln5_fu_101_p3 = ((icmp_ln5_reg_129[0:0] === 1'b1) ? bitcast_ln17_1_fu_97_p1 : 32'd953267991);

assign xor_ln17_fu_91_p2 = (bitcast_ln17_fu_88_p1 ^ 32'd2147483648);

endmodule //algebra
